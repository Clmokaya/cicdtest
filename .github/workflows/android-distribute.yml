name: Flutter CI/CD with Firebase App Distribution

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_distribute:
    name: Build Flutter app and distribute via Firebase App Distribution
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Run Flutter tests
        run: flutter test

      - name: Set up Firebase CLI
        run: |
          curl -sL https://firebase.tools | bash

      # Authenticate with Firebase CLI using a service account key stored in GitHub secrets
      - name: Authenticate Firebase
        env:
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
        run: |
          echo "$FIREBASE_SERVICE_ACCOUNT" > $HOME/firebase-service-account.json
          firebase login:ci --token "$(firebase login:ci --no-localhost)" || echo "Already logged in"
          firebase use --add
          firebase login:ci --token "$(cat $HOME/firebase-service-account.json)" || echo "Already logged in"
          firebase auth:ci --token "$(cat $HOME/firebase-service-account.json)"
        # Actually, above commands are a bit off; better way is to use Firebase CLI with a service account and authenticate via GOOGLE_APPLICATION_CREDENTIALS environment variable.

      # Set up GOOGLE_APPLICATION_CREDENTIALS environment variable for Firebase authentication
      - name: Set GOOGLE_APPLICATION_CREDENTIALS
        run: echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" > ${{ runner.temp }}/firebase_key.json
      - name: Build Android app (release)
        run: flutter build apk --release

      # Upload to Firebase App Distribution
      - name: Distribute Android App to Firebase App Distribution
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ runner.temp }}/firebase_key.json
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID_ANDROID }}
          FIREBASE_TESTERS: ${{ secrets.FIREBASE_TESTERS }}  # comma separated emails or group aliases
          FIREBASE_GROUPS: ${{ secrets.FIREBASE_GROUPS }}    # optional
        run: |
          # Provide the path to the APK generated
          APK_PATH=build/app/outputs/flutter-apk/app-release.apk

          # Distribute the app
          firebase appdistribution:distribute $APK_PATH \
            --app $FIREBASE_APP_ID \
            --groups $FIREBASE_GROUPS \
            --testers $FIREBASE_TESTERS \
            --release-notes "Automated build from GitHub Actions"

      # Optional: build and distribute iOS app if relevant
      - name: Build iOS app (release)
        if: runner.os == 'macOS'
        run: flutter build ipa --release

      - name: Distribute iOS app to Firebase App Distribution
        if: runner.os == 'macOS'
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ runner.temp }}/firebase_key.json
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID_IOS }}
          FIREBASE_TESTERS: ${{ secrets.FIREBASE_TESTERS }}
          FIREBASE_GROUPS: ${{ secrets.FIREBASE_GROUPS }}
        run: |
          IPA_PATH=build/ios/ipa/*.ipa

          firebase appdistribution:distribute $IPA_PATH \
            --app $FIREBASE_APP_ID \
            --groups $FIREBASE_GROUPS \
            --testers $FIREBASE_TESTERS \
            --release-notes "Automated iOS build from GitHub Actions"
